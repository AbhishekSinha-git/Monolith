import { mcpApi } from '@/api/mcp';
import type { Portfolio, Transaction, Mon  async initialize(): Promise<void> {
    await Promise.all([
      this.chatHistory.initialize(),
      this.refreshContext()
    ]);
  }

  private async refreshContext(): Promise<void> {
    try {
      const connectionStatus = await mcpApi.getConnectionStatus();
      this.context.connectionStatus = connectionStatus;

      if (connectionStatus.isConnected) {
        const [portfolio, transactions, netWorthHistory, spendingAnalysis] = await Promise.all([
          mcpApi.getPortfolio(),
          mcpApi.getTransactions({ limit: 10 }),
          mcpApi.getNetWorthHistory('month'),
          mcpApi.getSpendingAnalysis('month')
        ]);

        this.context.financialData = {
          portfolio,
          recentTransactions: transactions,
          netWorthTrend: netWorthHistory,
          spendingBreakdown: spendingAnalysis,
          lastUpdated: new Date()
        };
      }
    } catch (error) {
      console.error('Error refreshing context:', error);
    }
  }

  async processQuery(query: string): Promise<AIResponse> {
    this.context.lastQuery = query;

    // Store context with the message
    const context: StoredContext = {
      connectionStatus: this.context.connectionStatus!,
      netWorth: this.context.financialData?.portfolio.netWorth.value,
      portfolioSnapshot: this.context.financialData?.portfolio.assets.breakdown,
      marketConditions: await this.googleFinance.getMarketSummary()
    };

    // If not connected, return connection request
    if (!this.context.connectionStatus?.isConnected) {
      const response: AIResponse = {
        type: 'text',
        content: "I'd love to help you with your financial questions! However, I need access to your financial data to provide personalized insights. Please connect your accounts first by going to the Dashboard."
      };

      await this.chatHistory.addMessage({
        user_id: this.context.userId,
        content: response.content,
        is_user: false,
        type: 'text',
        context: messageContext
      });

      return response;
    }iMcpConnectionStatus } from '@/api/mcp';
import { GoogleFinanceService } from '@/services/googleFinance';

interface FinancialData {
  portfolio: Portfolio;
  recentTransactions: Transaction[];
  netWorthTrend: Array<{ date: string; netWorth: MoneyValue }>;
  spendingBreakdown: Array<{ category: string; total: MoneyValue }>;
  lastUpdated: Date;
}

interface AIResponse {
  content: string;
  type: 'text' | 'chart' | 'suggestion';
  data?: {
    type: 'pie' | 'line';
    data: Array<{
      name: string;
      value: number;
    }>;
  };
}

interface AIContext {
  userId: string;
  financialData: FinancialData | null;
  connectionStatus: FiMcpConnectionStatus | null;
  lastQuery?: string;
}

import { ChatHistoryService, type StoredContext } from '@/services/chatHistory';

export class AIService {
  private context: AIContext;
  private googleFinance: GoogleFinanceService;
  private chatHistory: ChatHistoryService;

  constructor(userId: string) {
    this.context = {
      userId,
      financialData: null,
      connectionStatus: null
    };
    this.googleFinance = new GoogleFinanceService();
    this.chatHistory = new ChatHistoryService(userId);
  }

  async initialize() {
    try {
      // Get connection status
      const connectionStatus = await mcpApi.getConnectionStatus();
      this.context.connectionStatus = connectionStatus;

      if (connectionStatus.isConnected) {
        try {
          // Fetch all necessary financial data in parallel
          const [portfolio, transactions, netWorthHistory, spendingAnalysis] = await Promise.all([
            mcpApi.getPortfolio(),
            mcpApi.getTransactions({ limit: 10 }), // Get 10 most recent transactions
            mcpApi.getNetWorthHistory('month'),
            mcpApi.getSpendingAnalysis('month')
          ]);

          this.context.financialData = {
            portfolio,
            recentTransactions: transactions,
            netWorthTrend: netWorthHistory,
            spendingBreakdown: spendingAnalysis,
            lastUpdated: new Date()
          };
      }
    } catch (error) {
      console.error('Error initializing AI context:', error);
      throw error;
    }
  }

  async processQuery(query: string): Promise<AIResponse> {
    this.context.lastQuery = query;

    // Store context with the message
    const context: StoredContext = {
      connectionStatus: this.context.connectionStatus!,
      netWorth: this.context.financialData?.portfolio.netWorth.value,
      portfolioSnapshot: this.context.financialData?.portfolio.assets.breakdown,
      marketConditions: await this.googleFinance.getMarketSummary()
    };

    // Store user's message first
    await this.chatHistory.addMessage({
      user_id: this.context.userId,
      content: query,
      is_user: true,
      type: 'text',
      context
    });

    // If not connected, return connection request
    if (!this.context.connectionStatus?.isConnected) {
      const response: AIResponse = {
        type: 'text',
        content: "I'd love to help you with your financial questions! However, I need access to your financial data to provide personalized insights. Please connect your accounts first by going to the Dashboard."
      };

      await this.chatHistory.addMessage({
        user_id: this.context.userId,
        content: response.content,
        is_user: false,
        type: 'text',
        context
      });

      return response;
    }

    // Process query based on context
    let response: AIResponse;
    
    if (query.toLowerCase().includes('net worth')) {
      response = {
        type: 'text',
        content: `Your current net worth is ₹${this.context.financialData?.portfolio.netWorth.value.toLocaleString()}. This consists of ₹${this.context.financialData?.portfolio.assets.total.toLocaleString()} in assets and ₹${this.context.financialData?.portfolio.liabilities.total.toLocaleString()} in liabilities.`
      };
    } else if (query.toLowerCase().includes('investment') || query.toLowerCase().includes('portfolio')) {
      const assets = this.context.financialData?.portfolio.assets.breakdown;
      response = {
        type: 'chart',
        content: 'Here\'s your current investment portfolio breakdown:',
        data: {
          type: 'pie',
          data: Object.entries(assets || {}).map(([key, value]) => ({
            name: key,
            value,
          }))
        }
      };
    } else {
      response = {
        type: 'text',
        content: 'I can help you analyze your finances, track your investments, and provide personalized financial advice. Try asking about your net worth, investment portfolio, or recent spending patterns.'
      };
    }

    // Store AI's response
    await this.chatHistory.addMessage({
      user_id: this.context.userId,
      content: response.content,
      is_user: false,
      type: response.type,
      data: response.data,
      context
    });

    return response;
  }

  async getSuggestions(): Promise<string[]> {
    if (!this.context.connectionStatus?.isConnected) {
      return [
        "How do I connect my accounts?",
        "What data do you need?",
        "How secure is my data?",
        "What can you help me with?",
      ];
    }

    return [
      "How has my net worth changed?",
      "Show my investment portfolio",
      "Analyze my spending patterns",
      "What are my top expenses?",
      "How can I improve my finances?",
    ];
  }
}